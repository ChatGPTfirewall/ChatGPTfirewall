name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest  
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.EXP_DOCKER_USERNAME }}
          password: ${{ secrets.EXP_DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Frontend Docker Image
        id: meta_frontend
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.EXP_DOCKER_USERNAME }}/frontend


      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./frontend 
          file: ./frontend/Dockerfile
          push: true  
          tags: ${{ secrets.EXP_DOCKER_USERNAME }}/frontend:latest
          labels: ${{ steps.meta_backend.outputs.labels }}
          no-cache: true
          build-args: |
            VITE_AUTH0_DOMAIN=${{ secrets.EXP_VITE_AUTH0_DOMAIN }}
            VITE_AUTH0_CLIENT_ID=${{ secrets.EXP_VITE_AUTH0_CLIENT_ID }}
            VITE_JWT_ISSUER=${{ secrets.EXP_VITE_JWT_ISSUER }}
            VITE_JWT_AUDIENCE=${{ secrets.EXP_VITE_JWT_AUDIENCE }}

  free-disk-space-build-docker:
      needs: build-and-push-frontend
      runs-on: ubuntu-latest
      steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
  build-and-push-backend:
    needs: free-disk-space-build-docker
    runs-on: ubuntu-latest  
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.EXP_DOCKER_USERNAME }}
          password: ${{ secrets.EXP_DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Frontend Docker Image
        id: meta_backend
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.EXP_DOCKER_USERNAME }}/backend


      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./backend 
          file: ./backend/Dockerfile
          push: true  
          tags: ${{ secrets.EXP_DOCKER_USERNAME }}/backend:latest
          labels: ${{ steps.meta_backend.outputs.labels }}
          no-cache: true
  deploy:
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EXP_SERVER_HOST }}
          username: ${{ secrets.EXP_SERVER_USER }}
          password: ${{ secrets.EXP_SERVER_SSH_PASSWORD }}
          script: |
            export DB_USER=${{ secrets.DB_USER }}
            echo $DB_USER
            export DB_NAME=${{ secrets.DB_NAME }}
            echo $DB_NAEM
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export SECRET_KEY='${{ secrets.SECRET_KEY }}'
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export QDRANT_URL=${{ secrets.EXP_QDRANT_URL }}
            export QDRANT_SECRET=${{ secrets.EXP_QDRANT_SECRET }}
            export SPACY_NLP_MODEL=${{ secrets.SPACY_NLP_MODEL }}
            export TRANSFORMER_MODEL=${{ secrets.TRANSFORMER_MODEL }}
            export OPEN_AI_KEY=${{ secrets.OPEN_AI_KEY }}
            export DOCKER_USERNAME=${{ secrets.EXP_DOCKER_USERNAME }}
            export DEBUG=${{ secrets.DEBUG }}
            export JWT_ISSUER=${{ secrets.EXP_JWT_ISSUER }}
            export JWT_AUDIENCE=${{ secrets.EXP_JWT_AUDIENCE }}
            docker compose pull
            docker compose up -d
          command_timeout: 25m
